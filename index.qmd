---
title: "Homework: Finding Your Way in R and Python"
execute:
  error: true
author: "Dhanushka Sanjeewa"
output: html_document
---

Instructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.

In Canvas, submit a link to your github repository containing the updated files. 

Note: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session). 

# Modes of Execution

Consider the 6 counting words examples in the [textbook module](https://srvanderplas.github.io/stat-computing-r-python/part-tools/04-scripts-notebooks.html#a-short-history-of-talking-to-computers) (they are in 3 separate 'your turn' sections). Look at the code, and then at the information provided for each example. What is different? What is the same? Write 2-3 sentences describing how script mode, interactive mode, and command-line mode differ in R and Python.

---


**Interactive mode** : In this mode, we run codes line by line. This might be time consuming if you have lots of lines of code, but its really helpful in debugging as we will be able to identify the line that produces the error by running the code line by line.

**Script mode** : In this mode we run an entire script (all the codes) at once. This method is more useful when you have to repeatedly do the same task over and over again.

**Terminal mode** : In this mode, we directly get the computer to run the scripts without using any environment like R, python and etc. In order to use the terminal mode, 1st we need to set up the relevant environment (R/ pyhton) to the system path. 

---


# Programming with Variables

In this section, you'll demonstrate that you understand how to solve simple math problems using code. First, you'll want to define variables to represent the variables in the equation. Give the variables values that can be used to determine the value of the variable on the other side of the `=`. Then, write code to solve the equation for the value of the variable. 

## Pythagorean Theorem in R

$$a^2 + b^2 = c^2$$

Use the chunk below to define variables $a$, $b$, and $c$, where you define values (of your choice) for $a$ and $b$. Based on the choice of $a$ and $b$, determine $c$ using the mathematical formula. You may need to find the square root function in R to make this work.

```{r pythagorean-theorem-r}
# Your pythagorean theorem code goes here (Using R)
a = 12
b = 5

c = sqrt(a^2 +b^2)
print(c)

```
```{python}

##Your pythagorean theorem code goes here (Using python)

a = 12
b = 5

import math
c = math.sqrt(a**2 + b**2)
print(c)

```


## Quadratic Formula in Python

$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$

Use the chunk below to define variables $a$, $b$, and $c$, and then define $x1$ and $x2$, the possible values for $x$. You may find it helpful to define a few additional variables, such as the value of the discriminant $\sqrt{b^2 - 4ac}$, to make it easier to calculate the results. 

```{python quad-formula-py}
# Your quadratic formula code goes here (Using python)

#Create 3 numbers 
a=2
b=3
c=1

import math  ## import the math library
DS = math.sqrt((b**2) -(4*a*c))  ##Discriminant_part
x1 = (-b + DS)/(2*a)
x2 = (-b - DS)/(2*a)

print("solutions are:", "X1 =" ,x1, "and X2 =", x2)

```

```{r}
# Your quadratic formula code goes here (R)

a = 2; b = 3; c = 1;
DS = sqrt(b^2 - 4*a*c) # calculates the Discriminant factor

x1 = (-b + DS)/(2*a)
x2 = (-b - DS)/(2*a)

cat("the solutions are:", "x1 = ", x1 , "and x2 = ", x2)

```


# Debugging practice

Look at the data frame below, which contains 3 columns: `Name`, `Salary`, and `Hire.Year`. You've read in this data from the [data file online](https://github.com/unl-statistics/stat850/blob/main/homework/02-data.tsv) and ideally, you want to plot `Hire.Year` on the x-axis and `Salary` on the y-axis (code to do this is provided).

Unfortunately, the data isn't reading in properly. Identify the problem, propose a solution, and try to implement your solution using functions on the R reference card.

Some things you may want to consider: - `gsub`, a "find and replace" function. See more details by typing `?gsub` into the R console. - You can access columns in a data frame using `$`: `df$col1` will get you `col1` of the `df` object. - You can access items in a vector using `[]`: `x[1]` will get you the first item in `x`

Note: You should be able to **identify** the problem given what you know about R from this week's reading. You may not be able to implement a solution without some additional research, so if you don't get that far that's ok.

```{r}
# This line reads in a tab-separated data file with a header naming the columns
salary <- read.table("02-data.tsv", sep = "\t", header = T)

# This code plots labels for each individual at location (x, y)
library(ggplot2)
ggplot(salary, aes(x = Hire.Year, y = Salary, label = Name)) + 
  geom_label()

# This displays the salary object
salary
```

------------------------------------------------------------------------

**The problem with the data is:** Well, the Y axis seems incorrect. Indeed, It's because the variable "Salary" has an entity [*first one*] that is recorded with a **$ sign** and a **comma** which makes it a "String" value.

Here is how I solved the problem:


```{r cleaning-the-data-r}
# Your implementation code goes here

#### Changed the code of generating the graph by adding the parse_number() function when defining the salary variable with in ggplot.

# This line reads in a tab-separated data file with a header naming the columns

salary <- read.table("02-data.tsv", sep = "\t", header = T)

# Load the relevant libraries (Note : "readr" library is essential to make the adjustment)

library(ggplot2); library(readr)

# This code plots labels for each individual at location (x, y)

ggplot(salary, aes(x = Hire.Year, y = parse_number(Salary), label = Name)) + geom_label()

# This displays the salary object
salary

```

**Explanation of the graph**

It can be observed that with the experience, Salary increases among the employees. In other words, those who were recruited recently have a lower salary compared to those who were recruited long ago.

```{python}
# This python code fixes the error
# Import the relevant libraries

import pandas as pd
import re
import matplotlib.pyplot as plt

# Load the data file into Python

Data1 = pd.read_table("02-data.tsv", sep= "\t")

print(Data1)  # Print the Dataset

# Removing the $ and "," from the Salary value of the index 0. This returns a string. To make it a number we can use float function.

x = float(re.sub(r"[^\d.]", "", Data1["Salary"][0]))

# Now replace the index 0 with x
Data1.loc[0, "Salary"] = x

# Plotting

plt.scatter(x=Data1["Hire Year"], y=Data1["Salary"], c= "red", s= 100, )
plt.xlabel("Hire Year")
plt.ylabel("Salary")
plt.title("Scatter Plot of Hire Year vs. Salary")
plt.grid(True)
plt.show()

```



